import { InterviewArticleModel, InterviewArticleCategory } from '../model/InterviewArticleModel';

/**
 * 面试文章Mock数据
 */
export class InterviewArticleMockData {
  private static articles: InterviewArticleModel[] = [
    {
      id: 1,
      title: '如何准备技术面试：从零到offer的完整指南',
      summary: '本文详细介绍了技术面试的准备流程，包括简历优化、技术栈梳理、项目经验总结等关键环节，帮助求职者系统性地准备面试。',
      content: `# 如何准备技术面试：从零到offer的完整指南

## 前言
技术面试是每个程序员职业生涯中的重要环节。本文将从多个维度为大家详细介绍如何系统性地准备技术面试。

## 一、简历优化
### 1.1 简历结构
- **个人信息**：姓名、联系方式、GitHub链接
- **教育背景**：学校、专业、GPA（如果优秀）
- **工作经验**：按时间倒序，突出技术栈和项目成果
- **项目经验**：3-5个核心项目，详细描述技术难点和解决方案
- **技能清单**：按熟练程度分类列出

### 1.2 项目描述技巧
使用STAR法则（Situation、Task、Action、Result）来描述项目：
- **Situation**：项目背景和面临的挑战
- **Task**：你在项目中的具体任务
- **Action**：你采取的技术方案和行动
- **Result**：项目的最终成果和影响

## 二、技术栈梳理
### 2.1 基础知识复习

- **计算机网络**：TCP/IP、HTTP/HTTPS、DNS、CDN
- **操作系统**：进程与线程、内存管理、文件系统
- **数据库**：SQL语法、索引优化、事务处理

### 2.2 专业技能深化
根据目标岗位，深入学习相关技术栈：
- **前端**：HTML/CSS/JavaScript、React/Vue、Webpack、性能优化
- **后端**：Java/Python/Go、Spring/Django、微服务、缓存
- **移动端**：Android/iOS、跨平台框架、性能优化

## 三、面试流程准备
### 3.1 电话/视频初筛
- 准备自我介绍（1-2分钟）
- 熟悉简历上的每个项目
- 准备常见问题的回答

### 3.2 技术面试
- **算法题**：LeetCode刷题，掌握常见算法模式
- **系统设计**：了解分布式系统基础概念
- **项目深挖**：准备详细的技术实现细节

### 3.3 HR面试
- 了解公司文化和价值观
- 准备职业规划相关问题
- 薪资谈判技巧

## 四、心态调整
### 4.1 保持自信
- 充分准备是自信的基础
- 面试是双向选择的过程
- 失败是成功的垫脚石

### 4.2 持续学习
- 技术更新迅速，保持学习热情
- 关注行业动态和新技术趋势
- 参与开源项目和技术社区

## 总结
技术面试的成功需要系统性的准备和持续的努力。希望本文能够帮助大家在面试中取得好成绩，获得心仪的offer！

记住：机会总是留给有准备的人。`,
      author: '张技术',
      publishDate: '2024-12-15',
      readTime: 8,
      category: InterviewArticleCategory.PREPARATION,
      tags: ['面试准备', '简历优化', '技术栈'],
      viewCount: 1520,
      likeCount: 89,
      isLiked: false
    },
    {
      id: 2,
      title: '算法面试必备：数据结构与算法核心知识点',
      summary: '深入解析算法面试中最常考的数据结构和算法，包括数组、链表、树、图、动态规划等，提供详细的解题思路和代码实现。',
      content: `# 算法面试必备：数据结构与算法核心知识点

## 前言
算法面试是技术面试的重要组成部分，本文将系统梳理算法面试中的核心知识点。

## 一、基础数据结构
### 1.1 数组
- **特点**：连续内存存储，支持随机访问
- **时间复杂度**：访问O(1)，插入/删除O(n)
- **常见题型**：两数之和、三数之和、最大子数组和

### 1.2 链表
- **特点**：动态内存分配，插入删除灵活
- **时间复杂度**：访问O(n)，插入/删除O(1)
- **常见题型**：反转链表、合并链表、环形链表

### 1.3 栈和队列
- **栈**：后进先出(LIFO)，用于括号匹配、表达式求值
- **队列**：先进先出(FIFO)，用于BFS、任务调度

## 二、高级数据结构
### 2.1 二叉树
- **遍历方式**：前序、中序、后序、层序
- **特殊树型**：二叉搜索树、平衡二叉树、完全二叉树
- **常见题型**：最大深度、路径和、序列化

### 2.2 图
- **表示方法**：邻接矩阵、邻接表
- **遍历算法**：DFS、BFS
- **最短路径**：Dijkstra、Floyd-Warshall

## 三、核心算法
### 3.1 排序算法
- **快速排序**：平均O(nlogn)，最坏O(n²)
- **归并排序**：稳定O(nlogn)
- **堆排序**：O(nlogn)，原地排序

### 3.2 搜索算法
- **二分查找**：O(logn)，适用于有序数组
- **深度优先搜索**：用于图遍历、回溯
- **广度优先搜索**：用于最短路径、层序遍历

### 3.3 动态规划
- **核心思想**：最优子结构、状态转移方程
- **经典问题**：斐波那契、背包问题、最长公共子序列
- **解题步骤**：定义状态、找转移方程、确定边界

## 四、面试技巧
### 4.1 解题步骤
1. **理解题意**：仔细阅读题目，确认输入输出
2. **分析复杂度**：时间复杂度和空间复杂度要求
3. **设计算法**：从暴力解法开始，逐步优化
4. **编写代码**：注意边界条件和异常处理
5. **测试验证**：用示例数据验证正确性

### 4.2 常见陷阱
- **边界条件**：空数组、单元素、负数等
- **整数溢出**：大数运算时要考虑溢出
- **时间限制**：注意算法的时间复杂度

## 总结
算法面试需要扎实的基础和大量的练习。建议每天坚持刷题，总结解题模式，提高编程能力。`,
      author: '李算法',
      publishDate: '2024-12-14',
      readTime: 12,
      category: InterviewArticleCategory.ALGORITHM,
      tags: ['算法', '数据结构', 'LeetCode'],
      viewCount: 2340,
      likeCount: 156,
      isLiked: true
    },
    {
      id: 3,
      title: '行为面试攻略：STAR法则与常见问题解答',
      summary: '详细介绍行为面试的核心方法STAR法则，并提供常见行为面试问题的标准回答模板，帮助求职者在行为面试中脱颖而出。',
      content: `# 行为面试攻略：STAR法则与常见问题解答

## 前言
行为面试是评估候选人软技能和文化匹配度的重要环节，本文将详细介绍如何准备和应对行为面试。

## 一、STAR法则详解
### 1.1 什么是STAR法则
STAR是一种结构化的回答方法：
- **S (Situation)**：情境 - 描述具体的背景和环境
- **T (Task)**：任务 - 说明你需要完成的具体任务
- **A (Action)**：行动 - 详述你采取的具体行动
- **R (Result)**：结果 - 展示最终的成果和影响

### 1.2 STAR法则的优势
- **结构清晰**：逻辑性强，便于面试官理解
- **内容完整**：涵盖问题的各个方面
- **突出贡献**：强调个人的作用和价值
- **量化结果**：用数据说话，更有说服力

## 二、常见行为面试问题
### 2.1 团队合作类
**问题**："请描述一次你与团队成员发生分歧的经历"

**STAR回答示例**：
- **S**：在上一个项目中，我们团队对技术方案选择产生了分歧
- **T**：我需要说服团队采用我认为更合适的技术方案
- **A**：我准备了详细的技术对比文档，组织了技术评审会议，邀请架构师参与讨论
- **R**：最终团队达成一致，项目按时交付，性能提升了30%

### 2.2 解决问题类
**问题**："描述一次你解决复杂技术问题的经历"

**STAR回答要点**：
- **S**：系统出现性能瓶颈，用户投诉增多
- **T**：需要在一周内找到并解决性能问题
- **A**：分析日志、性能监控、代码审查、数据库优化
- **R**：响应时间减少50%，用户满意度提升

### 2.3 领导力类
**问题**："请分享一次你领导项目的经历"

**回答框架**：
- **S**：项目背景和挑战
- **T**：领导目标和责任
- **A**：团队管理、资源协调、风险控制
- **R**：项目成果和团队成长

## 三、准备策略
### 3.1 故事库建设
准备5-8个核心故事，涵盖：
- **成功项目**：展示技术能力和项目管理
- **失败经历**：体现学习能力和抗压能力
- **团队协作**：突出沟通和合作技巧
- **创新突破**：展现创造力和主动性

### 3.2 量化准备
为每个故事准备具体数据：
- **时间节点**：项目周期、解决问题用时
- **规模指标**：团队人数、代码量、用户数
- **效果数据**：性能提升、成本节约、收益增长

## 四、面试技巧
### 4.1 表达技巧
- **简洁明了**：控制回答时间在2-3分钟
- **重点突出**：强调个人贡献和价值
- **真实可信**：避免夸大和虚构
- **积极正面**：即使是失败经历也要体现成长

### 4.2 常见误区
- **过于简单**：缺乏具体细节和深度
- **过于复杂**：冗长啰嗦，重点不突出
- **缺乏量化**：没有具体数据支撑
- **推卸责任**：遇到问题总是怪别人

## 五、特殊问题应对
### 5.1 压力面试
- **保持冷静**：不要被激怒或慌张
- **理性分析**：客观看待问题和批评
- **积极回应**：展现抗压能力和学习态度

### 5.2 价值观考察
- **了解企业文化**：提前研究公司价值观
- **真实表达**：不要刻意迎合，保持真实
- **举例说明**：用具体事例证明价值观匹配

## 总结
行为面试的成功关键在于充分准备和真实表达。通过STAR法则构建故事库，用具体事例展现个人能力和价值观，相信你一定能在行为面试中取得好成绩！`,
      author: '王HR',
      publishDate: '2024-12-13',
      readTime: 10,
      category: InterviewArticleCategory.BEHAVIORAL,
      tags: ['行为面试', 'STAR法则', '软技能'],
      viewCount: 1890,
      likeCount: 134,
      isLiked: false
    },
    {
      id: 4,
      title: '系统设计面试指南：从基础架构到高并发系统',
      summary: '全面解析系统设计面试的核心要点，包括架构设计原则、高并发处理、数据库设计、缓存策略等，助你轻松应对系统设计面试。',
      content: `# 系统设计面试指南：从基础架构到高并发系统

## 前言
系统设计面试是高级工程师面试的重要环节，考察候选人的架构思维和工程实践能力。

## 一、系统设计基础
### 1.1 设计原则
- **可扩展性**：系统能够处理增长的负载
- **可靠性**：系统在故障时仍能正常工作
- **可用性**：系统的正常运行时间百分比
- **一致性**：数据在所有节点上保持同步
- **分区容错性**：网络分区时系统仍能工作

### 1.2 CAP定理
- **C (Consistency)**：一致性
- **A (Availability)**：可用性  
- **P (Partition tolerance)**：分区容错性
- **核心观点**：分布式系统最多只能同时保证三个特性中的两个

## 二、架构设计模式
### 2.1 分层架构
- **表示层**：用户界面和API
- **业务层**：业务逻辑处理
- **数据层**：数据存储和访问
- **优点**：职责分离，易于维护
- **缺点**：可能存在性能瓶颈

### 2.2 微服务架构
- **服务拆分**：按业务功能拆分服务
- **独立部署**：每个服务可独立开发和部署
- **技术多样性**：不同服务可使用不同技术栈
- **挑战**：服务间通信、数据一致性、运维复杂度

### 2.3 事件驱动架构
- **异步通信**：通过事件进行服务间通信
- **松耦合**：服务之间依赖度低
- **可扩展性**：易于添加新的事件处理器
- **应用场景**：实时数据处理、消息系统

## 三、高并发处理
### 3.1 负载均衡
- **轮询**：请求依次分发到各服务器
- **加权轮询**：根据服务器性能分配权重
- **最少连接**：将请求分发到连接数最少的服务器
- **IP哈希**：根据客户端IP进行哈希分配

### 3.2 缓存策略
- **浏览器缓存**：减少网络请求
- **CDN缓存**：就近访问静态资源
- **应用缓存**：Redis、Memcached
- **数据库缓存**：查询结果缓存

### 3.3 数据库优化
- **读写分离**：主库写入，从库读取
- **分库分表**：水平拆分和垂直拆分
- **索引优化**：合理设计索引提高查询性能
- **连接池**：复用数据库连接

## 四、经典系统设计题目
### 4.1 设计一个短链接服务
**需求分析**：
- 将长URL转换为短URL
- 支持自定义短链接
- 统计点击次数
- 高并发读写

**设计要点**：
- **URL编码**：Base62编码生成短链接
- **数据存储**：关系型数据库存储映射关系
- **缓存策略**：热点数据缓存到Redis
- **负载均衡**：多台服务器处理请求

### 4.2 设计一个聊天系统
**功能需求**：
- 一对一聊天
- 群组聊天
- 在线状态
- 消息推送

**技术方案**：
- **WebSocket**：实时双向通信
- **消息队列**：异步消息处理
- **数据库设计**：用户表、聊天室表、消息表
- **推送服务**：离线消息推送

## 五、面试技巧
### 5.1 解题步骤
1. **需求澄清**：确认功能和非功能需求
2. **容量估算**：计算QPS、存储、带宽需求
3. **高层设计**：画出系统整体架构图
4. **详细设计**：深入设计核心组件
5. **扩展讨论**：讨论扩展性和优化方案

### 5.2 沟通技巧
- **主动提问**：澄清模糊的需求
- **逐步细化**：从高层到细节逐步展开
- **权衡取舍**：讨论不同方案的优缺点
- **实际经验**：结合自己的项目经验

## 六、常见陷阱
### 6.1 过度设计
- **避免一开始就设计复杂系统**
- **从简单方案开始，逐步优化**
- **根据实际需求选择技术方案**

### 6.2 忽略非功能需求
- **性能要求**：响应时间、吞吐量
- **可靠性要求**：可用性、容错性
- **安全要求**：认证、授权、数据保护

## 总结
系统设计面试考察的是工程师的综合能力，需要扎实的技术基础和丰富的实践经验。通过系统学习和大量练习，相信你能在系统设计面试中表现出色！`,
      author: '赵架构',
      publishDate: '2024-12-12',
      readTime: 15,
      category: InterviewArticleCategory.SYSTEM_DESIGN,
      tags: ['系统设计', '架构', '高并发'],
      viewCount: 3210,
      likeCount: 245,
      isLiked: true
    },
    {
      id: 5,
      title: '薪资谈判艺术：如何在面试中争取理想薪酬',
      summary: '深入分析薪资谈判的策略和技巧，包括市场调研、谈判时机、沟通技巧等，帮助求职者在薪资谈判中占据主动地位。',
      content: `# 薪资谈判艺术：如何在面试中争取理想薪酬

## 前言
薪资谈判是求职过程中的关键环节，掌握正确的谈判策略和技巧，能够帮助你获得更满意的薪酬待遇。

## 一、谈判前的准备
### 1.1 市场调研
- **行业薪酬报告**：查看权威的薪酬调研报告
- **招聘网站数据**：分析同类职位的薪酬范围
- **内部消息**：通过朋友了解目标公司薪酬水平
- **地区差异**：考虑不同城市的薪酬差异

### 1.2 自我评估
- **技能水平**：客观评估自己的技术能力
- **工作经验**：总结项目经验和业绩成果
- **教育背景**：学历和专业认证的加分项
- **市场稀缺性**：评估技能的市场需求度

### 1.3 期望设定
- **底线薪酬**：能够接受的最低薪酬
- **理想薪酬**：希望达到的薪酬水平
- **谈判空间**：在底线和理想之间留出谈判余地

## 二、谈判时机把握
### 2.1 最佳时机
- **收到口头offer后**：公司已经决定录用你
- **正式offer前**：还有调整空间
- **多个offer时**：有更强的谈判筹码
- **年底或预算周期**：公司预算相对充裕

### 2.2 避免的时机
- **初次面试**：过早提及薪酬要求
- **面试表现不佳**：没有展现足够价值
- **公司困难期**：经济环境不好时
- **HR明确表示不可谈**：尊重公司政策

## 三、谈判策略
### 3.1 价值展示策略
- **量化成果**：用具体数据展示贡献
- **技能匹配**：强调技能与岗位的匹配度
- **解决问题能力**：展示解决复杂问题的经验
- **学习能力**：体现快速学习和适应能力

### 3.2 多维度谈判
不仅仅是基本工资，还可以谈判：
- **奖金**：年终奖、项目奖金、绩效奖金
- **股权**：期权、股票、分红权
- **福利**：保险、公积金、带薪假期
- **发展机会**：培训、晋升、项目参与

### 3.3 渐进式谈判
- **先谈总包**：整体薪酬待遇
- **再谈结构**：基本工资和奖金比例
- **最后谈细节**：具体的福利项目

## 四、沟通技巧
### 4.1 表达方式
- **积极正面**：表达对公司和职位的兴趣
- **理性客观**：基于市场数据和个人价值
- **灵活开放**：愿意讨论不同的薪酬方案
- **专业礼貌**：保持专业的沟通态度

### 4.2 常用话术
**开场**：
"我对这个职位很感兴趣，希望我们能就薪酬待遇达成双方都满意的协议。"

**提出要求**：
"基于我的经验和市场调研，我期望的薪酬范围是X-Y万。"

**回应低offer**：
"感谢您的offer，我想了解一下是否还有调整的空间？"

**结束**：
"我需要一些时间考虑，明天给您答复可以吗？"

## 五、常见情况应对
### 5.1 公司说预算有限
**应对策略**：
- 了解预算限制的具体原因
- 提出分阶段调薪方案
- 争取其他形式的补偿
- 要求明确的调薪时间表

### 5.2 HR说薪酬不可谈
**应对策略**：
- 询问是否可以和直接主管讨论
- 了解公司薪酬调整的流程
- 争取试用期后的调薪机会
- 考虑其他福利补偿

### 5.3 多个offer选择
**应对策略**：
- 诚实告知有其他选择
- 给出决定的时间期限
- 要求公司提供最终报价
- 综合考虑发展前景

## 六、谈判误区
### 6.1 常见错误
- **过于激进**：要价过高，超出合理范围
- **缺乏依据**：没有市场数据支撑
- **只谈工资**：忽略其他福利待遇
- **情绪化**：因为不满而表现出负面情绪

### 6.2 心态调整
- **双赢思维**：寻求对双方都有利的方案
- **长远考虑**：不只看目前的薪酬数字
- **理性决策**：基于事实而非情感
- **保持耐心**：谈判可能需要多轮沟通

## 七、谈判后的处理
### 7.1 确认细节
- **书面确认**：要求书面的offer letter
- **条款明确**：确认所有谈判结果
- **生效时间**：明确薪酬调整的生效时间
- **考核标准**：了解绩效考核和调薪机制

### 7.2 关系维护
- **表达感谢**：感谢公司的理解和支持
- **承诺表现**：承诺会努力工作回报公司
- **保持专业**：即使谈判不成功也要保持专业
- **后续沟通**：建立良好的工作关系

## 总结
薪资谈判是一门艺术，需要充分的准备、合适的时机、正确的策略和良好的沟通技巧。记住，谈判的目标不是击败对方，而是找到双方都能接受的解决方案。

通过专业的谈判，你不仅能获得更好的薪酬待遇，还能展现自己的沟通能力和商业思维，为未来的职业发展打下良好基础。`,
      author: '孙谈判',
      publishDate: '2024-12-11',
      readTime: 11,
      category: InterviewArticleCategory.SALARY_NEGOTIATION,
      tags: ['薪资谈判', '职场技巧', '沟通'],
      viewCount: 2780,
      likeCount: 198,
      isLiked: false
    },
    {
      id: 6,
      title: '大厂面试经验分享：阿里、腾讯、字节跳动面试全流程',
      summary: '分享在阿里巴巴、腾讯、字节跳动等大厂的真实面试经历，包括面试流程、题目类型、面试官风格等，为求职者提供第一手经验。',
      content: `# 大厂面试经验分享：阿里、腾讯、字节跳动面试全流程

## 前言
作为一名有幸经历过多家大厂面试的程序员，我想分享一些真实的面试经验，希望能帮助到正在求职的朋友们。

## 一、阿里巴巴面试经验
### 1.1 面试流程
- **简历筛选**：1-2天
- **电话初筛**：30分钟，主要了解项目经验
- **一面技术面**：60分钟，算法+项目深挖
- **二面技术面**：60分钟，系统设计+技术广度
- **三面交叉面**：45分钟，其他团队面试官
- **四面HR面**：30分钟，价值观+薪资谈判

### 1.2 面试特点
- **重视基础**：计算机基础知识考察深入
- **项目深挖**：会深入询问项目的技术细节
- **价值观考察**：非常重视文化匹配度
- **算法要求高**：LeetCode中等难度以上

### 1.3 真实题目
**算法题**：
- 手写快速排序
- 二叉树的最近公共祖先
- LRU缓存实现

**系统设计**：
- 设计一个秒杀系统
- 如何设计淘宝的商品搜索

**项目问题**：
- 项目中遇到的最大技术挑战
- 如何保证系统的高可用性

## 二、腾讯面试经验
### 2.1 面试流程
- **简历筛选**：2-3天
- **一面技术面**：60分钟，基础+算法
- **二面技术面**：60分钟，项目+设计
- **三面总监面**：45分钟，技术视野+管理
- **HR面**：30分钟，背景调查+offer谈判

### 2.2 面试特点
- **注重实践**：更关注实际项目经验
- **技术深度**：会深入某个技术领域
- **团队协作**：重视团队合作能力
- **产品思维**：希望工程师有产品意识

### 2.3 真实题目
**算法题**：
- 链表相交问题
- 字符串匹配算法
- 动态规划经典题目

**技术问题**：
- MySQL索引优化
- Redis集群方案
- 微服务架构设计

**产品问题**：
- 如何优化微信朋友圈的性能
- 设计一个类似QQ的即时通讯系统

## 三、字节跳动面试经验
### 3.1 面试流程
- **简历筛选**：1-2天
- **一面技术面**：60分钟，算法为主
- **二面技术面**：60分钟，系统设计
- **三面技术面**：60分钟，技术深度
- **四面HR面**：30分钟，文化匹配

### 3.2 面试特点
- **算法导向**：算法题比重很大
- **快节奏**：面试节奏较快，要求思维敏捷
- **创新思维**：喜欢有创新想法的候选人
- **年轻化**：面试官普遍年轻，沟通轻松

### 3.3 真实题目
**算法题**：
- 岛屿数量问题
- 滑动窗口最大值
- 字符串编辑距离

**系统设计**：
- 设计抖音的推荐系统
- 如何设计一个分布式ID生成器

**开放问题**：
- 如何提高今日头条的用户留存率
- 设计一个短视频App的架构

## 四、面试准备建议
### 4.1 技术准备
- **算法刷题**：LeetCode至少300题
- **系统设计**：学习分布式系统基础
- **项目总结**：深入理解自己做过的项目
- **技术广度**：了解主流技术栈

### 4.2 软技能准备
- **沟通表达**：清晰表达技术思路
- **问题分析**：结构化思考问题
- **学习能力**：展现持续学习的态度
- **团队协作**：准备团队合作的例子

## 五、面试技巧总结
### 5.1 通用技巧
- **提前到达**：提前10-15分钟到达
- **着装得体**：商务休闲装即可
- **主动沟通**：遇到不懂的问题主动询问
- **思路清晰**：先说思路再写代码

### 5.2 算法题技巧
- **理解题意**：确保完全理解题目要求
- **分析复杂度**：说明时间和空间复杂度
- **考虑边界**：处理特殊情况和边界条件
- **优化方案**：从暴力解法开始逐步优化

### 5.3 系统设计技巧
- **需求澄清**：主动询问系统的具体需求
- **容量估算**：计算系统的规模和性能要求
- **逐步设计**：从高层架构到具体实现
- **权衡取舍**：讨论不同方案的优缺点

## 六、面试失败反思
### 6.1 常见失败原因
- **基础不扎实**：计算机基础知识薄弱
- **算法能力差**：刷题不够，思路不清晰
- **项目经验浅**：缺乏深度的项目经验
- **表达能力弱**：无法清晰表达技术思路

### 6.2 改进建议
- **系统学习**：补强基础知识短板
- **大量练习**：坚持刷题和系统设计练习
- **项目深挖**：深入理解项目的技术细节
- **表达训练**：多练习技术分享和讲解

## 七、心态调整
### 7.1 正确心态
- **平常心**：把面试当作技术交流
- **学习心**：从面试中学习新知识
- **坚持心**：面试失败是正常现象
- **成长心**：每次面试都是成长机会

### 7.2 压力管理
- **充分准备**：准备充分能减少焦虑
- **适度放松**：面试前适当放松心情
- **积极暗示**：给自己积极的心理暗示
- **总结反思**：面试后及时总结经验

## 总结
大厂面试虽然有一定难度，但只要准备充分、心态正确，相信每个人都有机会成功。记住，面试不仅是公司选择你，也是你选择公司的过程。

希望我的经验分享能对大家有所帮助，祝愿所有求职的朋友都能找到心仪的工作！加油！`,
      author: '陈大厂',
      publishDate: '2024-12-10',
      readTime: 18,
      category: InterviewArticleCategory.EXPERIENCE,
      tags: ['大厂面试', '面试经验', '求职'],
      viewCount: 4560,
      likeCount: 312,
      isLiked: true
    },
    {
      id: 7,
      title: '面试技巧大全：从简历投递到offer获取的完整攻略',
      summary: '涵盖求职全流程的面试技巧，包括简历制作、网申技巧、面试准备、现场表现、后续跟进等各个环节的实用建议。',
      content: `# 面试技巧大全：从简历投递到offer获取的完整攻略

## 前言
求职是一个系统工程，从简历制作到最终获得offer，每个环节都有其技巧和要点。本文将为大家提供一份完整的求职攻略。

## 一、简历制作技巧
### 1.1 简历结构
**标准结构**：
- 个人信息（姓名、联系方式、邮箱）
- 求职意向（目标职位、期望薪资、工作地点）
- 教育背景（学校、专业、学历、毕业时间）
- 工作经验（公司、职位、时间、工作内容）
- 项目经验（项目名称、技术栈、个人贡献）
- 技能清单（编程语言、框架、工具）
- 获奖证书（相关奖项、认证证书）

### 1.2 内容优化
**工作经验描述**：
- 使用动词开头：开发、设计、优化、实现
- 量化成果：提升性能30%、减少bug率50%
- 突出价值：为公司节省成本、提高效率
- 技术关键词：包含相关技术栈关键词

**项目经验描述**：
- 项目背景：解决什么问题
- 技术方案：使用什么技术
- 个人贡献：负责哪些模块
- 项目成果：达到什么效果

### 1.3 格式要求
- **页数控制**：1-2页为宜
- **字体统一**：使用标准字体，大小一致
- **排版整洁**：留白适当，层次分明
- **文件格式**：PDF格式，确保兼容性

## 二、网申投递策略
### 2.1 投递时机
- **黄金时间**：周二到周四上午9-11点
- **避免时间**：周末、节假日、深夜
- **招聘旺季**：春季3-5月，秋季9-11月
- **关注时效**：及时投递，避免错过截止时间

### 2.2 投递渠道
**官方渠道**：
- 公司官网招聘页面
- 公司微信公众号
- 校园招聘会
- 内推渠道

**第三方平台**：
- 智联招聘、前程无忧
- BOSS直聘、拉勾网
- 猎聘网、LinkedIn
- 垂直招聘网站

### 2.3 投递技巧
- **简历匹配**：根据JD调整简历内容
- **关键词优化**：包含职位描述中的关键词
- **邮件标题**：清晰标注应聘职位
- **求职信**：简短有力的自我介绍

## 三、面试前准备
### 3.1 公司调研
**基本信息**：
- 公司规模、发展历程
- 主营业务、产品服务
- 企业文化、价值观
- 最新新闻、发展动态

**深度了解**：
- 技术栈、架构体系
- 团队结构、汇报关系
- 薪酬福利、晋升机制
- 工作环境、加班情况

### 3.2 技术准备
**基础知识**：
- 计算机基础（网络、操作系统、数据库）
- 编程语言基础
- 数据结构与算法
- 设计模式

**专业技能**：
- 相关技术栈深入学习
- 项目经验总结梳理
- 最新技术趋势了解
- 开源项目贡献

### 3.3 模拟练习
- **自我介绍**：1-2分钟精炼版本
- **常见问题**：准备标准答案
- **算法题目**：LeetCode刷题练习
- **项目讲解**：准备详细的项目介绍

## 四、面试现场表现
### 4.1 着装礼仪
- **着装要求**：商务休闲，整洁得体
- **个人形象**：注意个人卫生，精神饱满
- **时间观念**：提前10-15分钟到达
- **礼貌用语**：使用敬语，保持微笑

### 4.2 沟通技巧
**表达技巧**：
- 语速适中，吐字清晰
- 逻辑清晰，条理分明
- 重点突出，简洁有力
- 眼神交流，保持自信

**倾听技巧**：
- 认真听取面试官问题
- 不打断面试官讲话
- 适时点头表示理解
- 记录关键信息

### 4.3 问题应对
**技术问题**：
- 先理解问题，再回答
- 说明思路，再写代码
- 考虑边界情况
- 分析时间空间复杂度

**行为问题**：
- 使用STAR法则回答
- 举具体例子说明
- 突出个人贡献
- 体现学习成长

**压力问题**：
- 保持冷静，不要慌张
- 理性分析，客观回答
- 承认不足，展现学习态度
- 化压力为动力

## 五、特殊面试类型
### 5.1 电话面试
**准备工作**：
- 选择安静的环境
- 准备纸笔记录
- 简历放在手边
- 充电确保通话质量

**注意事项**：
- 语速稍慢，发音清晰
- 适时确认对方是否听清
- 无法看到表情，语调要友好
- 准备好自我介绍

### 5.2 视频面试
**技术准备**：
- 测试摄像头和麦克风
- 确保网络连接稳定
- 准备备用设备
- 熟悉视频软件操作

**环境布置**：
- 选择光线充足的地方
- 背景简洁专业
- 避免干扰和噪音
- 摄像头与眼睛平齐

### 5.3 群面/无领导小组讨论
**角色定位**：
- 领导者：组织讨论，控制节奏
- 协调者：化解冲突，促进合作
- 记录者：记录要点，总结发言
- 贡献者：提供想法，积极参与

**表现技巧**：
- 积极参与，但不要抢话
- 尊重他人观点
- 逻辑清晰地表达
- 关注时间管理

## 六、面试后跟进
### 6.1 感谢信
**发送时机**：面试后24小时内
**内容要点**：
- 感谢面试机会
- 重申对职位的兴趣
- 补充遗漏的信息
- 期待后续沟通

### 6.2 结果跟进
- **等待时间**：按照面试官说的时间等待
- **主动询问**：超过预期时间可以礼貌询问
- **保持耐心**：HR流程可能较慢
- **继续投递**：不要停止其他机会

### 6.3 offer处理
**offer评估**：
- 薪酬福利对比
- 发展前景分析
- 工作环境考虑
- 个人兴趣匹配

**谈判技巧**：
- 基于市场数据
- 突出个人价值
- 保持专业态度
- 寻求双赢方案

## 七、常见问题应对
### 7.1 "请介绍一下自己"
**回答框架**：
- 基本信息（姓名、专业、经验）
- 技能特长（核心技术能力）
- 工作经历（重要项目经验）
- 求职动机（为什么选择这个职位）

### 7.2 "你的优缺点是什么"
**优点回答**：
- 选择与工作相关的优点
- 用具体例子证明
- 避免空洞的形容词

**缺点回答**：
- 选择不影响工作的缺点
- 说明改进措施
- 体现自我认知能力

### 7.3 "为什么离开上一家公司"
**正面回答**：
- 寻求更好的发展机会
- 希望学习新技术
- 公司业务调整

**避免说法**：
- 抱怨前公司或同事
- 薪资待遇不满
- 工作压力太大

## 八、心理调适
### 8.1 压力管理
- **充分准备**：准备越充分，压力越小
- **正确认知**：面试是双向选择
- **适度紧张**：适度紧张有助于发挥
- **放松技巧**：深呼吸、冥想、运动

### 8.2 失败应对
- **正常现象**：面试失败很正常
- **总结经验**：分析失败原因
- **持续改进**：针对性提升能力
- **保持信心**：相信自己的价值

## 总结
求职面试是一个综合性的过程，需要在各个环节都做好充分准备。记住，面试不仅是展示自己的机会，也是了解公司的过程。

保持积极的心态，持续学习和改进，相信每个人都能找到适合自己的工作机会。祝愿大家求职顺利，早日获得心仪的offer！`,
      author: '刘求职',
      publishDate: '2024-12-09',
      readTime: 20,
      category: InterviewArticleCategory.SKILLS,
      tags: ['面试技巧', '求职攻略', '职场指南'],
      viewCount: 3890,
      likeCount: 267,
      isLiked: false
    }
  ];

  /**
   * 获取所有文章
   */
  static getAllArticles(): InterviewArticleModel[] {
    return InterviewArticleMockData.articles;
  }

  /**
   * 根据关键词搜索文章
   */
  static searchArticles(keyword: string): InterviewArticleModel[] {
    const lowerKeyword = keyword.toLowerCase();
    return InterviewArticleMockData.articles.filter(article => 
      article.title.toLowerCase().includes(lowerKeyword) ||
      article.summary.toLowerCase().includes(lowerKeyword) ||
      article.tags.some(tag => tag.toLowerCase().includes(lowerKeyword))
    );
  }

  /**
   * 增加文章浏览量
   */
  static incrementViewCount(articleId: number): void {
    const article = InterviewArticleMockData.articles.find(a => a.id === articleId);
    if (article) {
      article.viewCount++;
    }
  }

  /**
   * 根据分类获取文章
   */
  static getArticlesByCategory(category: InterviewArticleCategory): InterviewArticleModel[] {
    return InterviewArticleMockData.articles.filter(article => article.category === category);
  }
}